name: CI

on:
  pull_request:
    branches: [ dev ]  # Chang√© pour dev selon votre README

jobs:
  branch-name-check:
    runs-on: ubuntu-latest
    # Ignorer le check pour Dependabot
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Check branch name format
        run: |
          echo "üîç V√©rification du nom de branche: ${{ github.head_ref }}"
          
          # D√©finir les patterns autoris√©s
          BRANCH_NAME="${{ github.head_ref }}"
          
          # V√©rifier si la branche correspond aux patterns autoris√©s
          if [[ "$BRANCH_NAME" =~ ^feat/[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" =~ ^fix/[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" =~ ^docs/[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" =~ ^test/[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" == "dev" ]] || \
             [[ "$BRANCH_NAME" == "main" ]]; then
            echo "‚úÖ Nom de branche valide: $BRANCH_NAME"
          else
            echo "‚ùå Nom de branche invalide: $BRANCH_NAME"
            echo ""
            echo "üìã Formats autoris√©s :"
            echo "‚Ä¢ feat/nom-fonctionnalite"
            echo "‚Ä¢ fix/nom-correction"
            echo "‚Ä¢ docs/nom-documentation"
            echo "‚Ä¢ test/nom-test"
            echo "‚Ä¢ dev"
            echo "‚Ä¢ main"
            echo ""
            echo "‚ùå Exemples valides :"
            echo "‚Ä¢ feat/login-system"
            echo "‚Ä¢ fix/auth-bug"
            echo "‚Ä¢ docs/readme-update"
            echo "‚Ä¢ test/user-validation"
            exit 1
          fi

  db-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Version mise √† jour
      - name: Setup Node.js
        uses: actions/setup-node@v4  # Version mise √† jour
        with:
          node-version: '18'
          cache: 'npm'  # Cache automatique
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Test database connection
        run: |
          cd backend
          npm run test -- userQueries.test.js
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}

  test:
    runs-on: ubuntu-latest
    needs: [db-check]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour SonarQube
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies and run tests with coverage
        run: |
          cd backend
          npm ci
          npm run test:coverage || npm test -- --coverage
          cd ../frontend
          npm ci
          npm test -- --coverage --watchAll=false
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Nom standard
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
