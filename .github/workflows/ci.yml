name: CI

on:
  pull_request:

jobs:
  branch-name-check:
    runs-on: ubuntu-latest
    # Ignorer le check pour Dependabot
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Check branch name format
        run: |
          echo "🔍 Vérification du nom de branche: ${{ github.head_ref }}"
          
          # Définir les patterns autorisés
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Vérifier si la branche correspond aux patterns autorisés
          if [[ "$BRANCH_NAME" =~ ^feat_[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" =~ ^fix_[a-zA-Z0-9_-]+$ ]] || \
             [[ "$BRANCH_NAME" == "dev" ]] || \
             [[ "$BRANCH_NAME" == "main" ]]; then
            echo "✅ Nom de branche valide: $BRANCH_NAME"
          else
            echo "❌ Nom de branche invalide: $BRANCH_NAME"
            echo ""
            echo "📋 Formats autorisés :"
            echo "• feat/nom-fonctionnalite"
            echo "• fix/nom-correction"
            exit 1
          fi
  db-check:
    needs: branch-name-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Test database connection
        run: |
          BACKEND_PKG=$(find . -path "*/backend/package.json" -o -path "./package.json" | head -1)
          BACKEND_DIR=$(dirname "$BACKEND_PKG")
          cd "$BACKEND_DIR"
          npm run test -- userQueries.test.js || echo "⚠️ Test skipped"
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}

  test:
    needs: branch-name-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Find and install backend dependencies
        run: |
          echo "🔍 Recherche du backend..."
          BACKEND_PKG=$(find . -path "*/backend/package.json" -o -path "./package.json" | head -1)
          
          if [ -n "$BACKEND_PKG" ]; then
            BACKEND_DIR=$(dirname "$BACKEND_PKG")
            echo "📦 Backend trouvé dans: $BACKEND_DIR"
            cd "$BACKEND_DIR"
            npm ci
          else
            echo "❌ Package.json backend non trouvé"
            exit 1
          fi
      - name: Find and install frontend dependencies
        run: |
          echo "🔍 Recherche du frontend..."
          FRONTEND_PKG=$(find . -path "*/frontend/package.json" | head -1)
          
          if [ -n "$FRONTEND_PKG" ]; then
            FRONTEND_DIR=$(dirname "$FRONTEND_PKG")
            echo "📦 Frontend trouvé dans: $FRONTEND_DIR"
            cd "$FRONTEND_DIR"
            npm ci
          else
            echo "⚠️ Frontend package.json non trouvé - skipped"
          fi
      - name: Run backend tests
        run: |
          BACKEND_PKG=$(find . -path "*/backend/package.json" -o -path "./package.json" | head -1)
          BACKEND_DIR=$(dirname "$BACKEND_PKG")
          cd "$BACKEND_DIR"
          npm test || echo "⚠️ Backend tests skipped"
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPORT: ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
      - name: Run frontend tests
        run: |
          FRONTEND_PKG=$(find . -path "*/frontend/package.json" | head -1)
          
          if [ -n "$FRONTEND_PKG" ]; then
            FRONTEND_DIR=$(dirname "$FRONTEND_PKG")
            cd "$FRONTEND_DIR"
            npm test -- --coverage --watchAll=false || echo "⚠️ Frontend tests skipped"
          else
            echo "⚠️ Frontend non trouvé - tests skipped"
          fi
          
  sonarqube:
    runs-on: ubuntu-latest
    needs: branch-name-check
    if: always() && (needs.branch-name-check.result == 'success' || github.actor == 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: SonarQube Scan - Backend
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=ttmartinks_bloc4_backend
            -Dsonar.organization=ttmartinks
            -Dsonar.projectName="CESIZen Backend"
            -Dsonar.projectVersion=1.0.0
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.test.js,**/*.spec.js
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
